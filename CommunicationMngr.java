package assign4;

import java.io.Serializable;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * CommunicationMngr which implements Serializable and handles communication
 * between the customer and the Dealership.
 * @author fhj
 */
public class CommunicationMngr implements Serializable {
  
    /**
     * private class reference dealership to Dealership.
     */
    private Dealership dealership;
    
	/**
	 * This queue contains a list of messages submitted by customers. We want 
     * to answer messages in a first-come first-served manner, hence, we use a 
     * queue implementation to store the messages. The next message to be 
     * answered is always the message at the head of the queue.
	 */
	private LinkedBlockingQueue<Message> newMessages;
    
	/**
	 * Customer messages that have been answered as well as answer messages 
     * generated by employees are added in this set.
	 */
	private Set<Message> answeredMessages;
    
    /**
     * Default constructor, initializes the newMessages and answeredMessages
     * data structures.
     */
    CommunicationMngr () {
      newMessages = new LinkedBlockingQueue<>();
      answeredMessages = new LinkedHashSet<>();
    }

    /**
     * Returns the Queue of unanswered messages.
     * @return 
     */
    public LinkedBlockingQueue<Message> getNewMessages() {
      return newMessages;
    }

    /**
     * Returns the Set of answered messages.
     * @return 
     */
    public Set<Message> getAnsweredMessages() {
      return answeredMessages;
    }
    
	/**
	 * Generates a new message submitted by a customer and adds it in the new 
     * messages queue.
	 * @param customer
	 * @param text
     * @throws java.lang.InterruptedException
	 */
	public void newMessage(Customer customer, String text) throws InterruptedException {
		Date currentDate = new Date(System.currentTimeMillis());
        
        Message message = new Message();
        
        message.setUser(customer);
        message.setMsgText(text);
        message.setDate(currentDate);
        
        newMessages.put(message);
	}

	/**
	 * Used by employees to respond to a customer message. Removes the original 
     * customer message from the new messages queue and adds it to the set of 
     * answered messages, along with the response message.
	 * @param originalMsg
	 * @param employee
	 * @param text
	 */
	public void respondToMessage(Message originalMsg, Employee employee, String text) {
      Date currentDate = new Date(System.currentTimeMillis());
      
      Message ansMessage = new Message();
      
      ansMessage.setDate(currentDate);
      ansMessage.setUser(employee);
      ansMessage.setMsgText(text);
      ansMessage.setInResponseTo(originalMsg);
      
      answeredMessages.add(ansMessage);
	}
    
    /**
     * This method prints the answered messages from the Set.
     */
    public void printAnsweredMessages() {
      System.out.println(answeredMessages);
    }
}